@page
@model SingleModel
@{
    ViewData["Title"] = "Single";
}

<h2>Single</h2>

<div class="username-container">
    <input type="text" id="username" required size="30" />
    <input type="submit" value="Continue" onclick="continueToGame()" />
</div>
<div class="game-container" style="display: none">

    <div class="grid-container">
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
    </div>
    <div class="tile-container">
    </div>
</div>



@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script type="text/javascript">
        let transportType = signalR.TransportType.WebSockets;
        let http = new signalR.HttpConnection("https://desolate-tundra-52228.herokuapp.com/hubs/game", { transport: transportType });        
        let connection = new signalR.HubConnection(http);

        function continueToGame() {
            $(".username-container").hide();
            $(".game-container").fadeIn("slow").show();
            connection.invoke("GetBoard");
            connection.invoke("Connect", $("#username").text());
            connection.invoke("CreateRoom", $("#username").text());

        }


        connection.on("Connected", function (message) {
            console.log(message);
        });

        connection.on("CreateRoom", function (message) {
            console.log(message);

        });


        connection.start();


        connection.on("SendBoard", function (message) {
            var game = new GameManager(message.cells);
            document.addEventListener("keypress", function (event) {
                var direction;
                switch (event.key.toUpperCase()) {
                    case "D":
                        direction = "LEFT";
                        break;
                    case "A":
                        direction = "RIGHT";
                        break;
                    case "W":
                        direction = "UP";
                        break;
                    case "S":
                        direction = "DOWN";
                        break;

                }
                game.handler(direction);
                connection.invoke("ShareBoard", $("#username").text(), this.cells);
            });

        });




        function GameManager(cells) {
            this.cells = cells;
            this.setup();

        }

        GameManager.prototype.setup = function () {
            this.gameOver = false;
            this.tileContainer = document.querySelector(".tile-container");
            this.savedPosition = [];
            this.isAvailable = [];
            this.index = [];
            var value = 0;
            for (var i = 0; i < 4; i++) {
                this.index[i] = [];
                for (var j = 0; j < 4; j++) {
                    this.index[i][j] = value;
                    value++;
                }

            }

            this.map = {
                'UP': { row: 1, col: 0, x: 1, y: 0 },
                'LEFT': { row: 0, col: -1, x: 0, y: 1 },
                'DOWN': { row: -1, col: 0, x: 1, y: 0 },
                'RIGHT': { row: 0, col: 1, x: 0, y: 1 }
            };

            this.tiles = [];
            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < 4; j++) {
                    this.tiles[this.index[i][j]] = document.createElement("div");
                    this.tiles[this.index[i][j]].className = "tile";
                    this.tileContainer.appendChild(this.tiles[this.index[i][j]]);
                    if (this.cells[this.index[i][j]].value != 0) {
                        this.tiles[this.index[i][j]].innerHTML = this.cells[this.index[i][j]].value;

                    }
                    var x = 10;
                    var y = 10;
                    x += 110 * j;
                    y += 110 * i;
                    $(this.tiles[this.index[i][j]]).css("left", `${x}px`);
                    $(this.tiles[this.index[i][j]]).css("top", `${y}px`);
                }

            }


        }

        GameManager.prototype.handler = function (direction) {
            var row;
            var col;
            var state = { changed: 0 };

            switch (direction) {
                case 'UP':
                    row = 0;
                    col = 0;
                    break;
                case 'LEFT':
                    row = 0;
                    col = 3;
                    break;
                case 'DOWN':
                    row = 3;
                    col = 0;
                    break;
                case 'RIGHT':
                    row = 0;
                    col = 0;
                    break;
            }

            this.move(row, col, direction, state);

            if (state.changed == 1) {
                this.collectAvailableCells();
                this.addNewNumber();

            }
            this.checkGameOver();
        }

        GameManager.prototype.move = function (row, col, direction, state) {
            while (true) {

                var currentRow = row;
                var currentCol = col;
                while (true) {
                    if (currentRow > 3 || currentRow < 0 || currentCol > 3 || currentCol < 0) {
                        break;

                    }
                    var current = this.cells[this.index[currentRow][currentCol]];

                    var nextRow = currentRow + this.map[direction].row;
                    var nextCol = currentCol + this.map[direction].col;
                    if (nextRow > 3 || nextRow < 0 || nextCol > 3 || nextCol < 0) {
                        break;

                    }
                    while (true) {

                        var next = this.cells[this.index[nextRow][nextCol]];
                        if (next.value == 0) {
                            nextRow += this.map[direction].row;
                            nextCol += this.map[direction].col;
                            if (nextRow > 3 || nextRow < 0 || nextCol > 3 || nextCol < 0) {
                                break;

                            }
                        } else if (next.value == current.value) {
                            current.value <<= 1;
                            next.value = 0;
                            this.updatePosition(currentRow, currentCol, nextRow, nextCol, current.value);
                            state.changed = 1;
                            break;

                        } else {
                            if (current.value == 0 && next.value != 0) {
                                current.value = next.value;
                                next.value = 0;
                                this.updatePosition(currentRow, currentCol, nextRow, nextCol, current.value);
                                state.changed = 1;
                                currentRow -= this.map[direction].row;
                                currentCol -= this.map[direction].col;
                                break;
                            } else if (current.value != 0) {
                                break;

                            }

                        }


                    }
                    currentRow += this.map[direction].row;
                    currentCol += this.map[direction].col;


                }
                row += this.map[direction].y;
                col += this.map[direction].x;

                if (row > 3 || row < 0) {
                    break;

                }
                if (col > 3 || col < 0) {
                    break;

                }
            }
        }

        GameManager.prototype.updatePosition = function (currentRow, currentCol, nextRow, nextCol, value) {
            var currentTile = this.tiles[this.index[currentRow][currentCol]];
            var nextTile = this.tiles[this.index[nextRow][nextCol]];
            var clone = nextTile.cloneNode(true);
            nextTile.innerHTML = "";
            this.tileContainer.appendChild(clone);
            $(clone).animate({
                "left": `${$(currentTile).css("left")}`,
                "top": `${$(currentTile).css("top")}`
            });
            setTimeout(function () {
                $(clone).remove();
                currentTile.innerHTML = value;
            }, 500);
        }

        GameManager.prototype.checkGameOver = function () {
            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < 4; j++) {
                    if (i - 1 >= 0) {
                        if (this.cells[this.index[i - 1][j]] == this.cells[this.index[i][j]]) {
                            return;

                        }

                    }
                    if (i + 1 < 4) {
                        if (this.cells[this.index[i + 1][j]] == this.cells[this.index[i][j]]) {
                            return;

                        }

                    }
                    if (j - 1 >= 0) {
                        if (this.cells[this.index[i][j - 1]] == this.cells[this.index[i][j]]) {
                            return;

                        }

                    }
                    if (j + 1 < 4) {
                        if (this.cells[this.index[i][j + 1]] == this.cells[this.index[i][j]]) {
                            return;

                        }

                    }
                    if (this.cells[this.index[i][j]]) {
                        return;

                    }

                }

            }
            this.gameOver = true;

        }

        GameManager.prototype.collectAvailableCells = function () {
            for (var i = 0; i < 16; i++) {
                if (this.cells[i].value == 0) {
                    this.isAvailable.push(this.cells[i]);
                }
            }

        }

        GameManager.prototype.addNewNumber = function () {
            var i = Math.floor(Math.random() * (this.isAvailable.length - 1));
            var index = this.cells.indexOf(this.isAvailable[i]);
            this.isAvailable[i].value = 2;
            var newTile = this.tiles[index];
            $(newTile).addClass("new-tile");
            newTile.innerHTML = 2;
            setTimeout(function () {
                $(newTile).removeClass("new-tile");
            }, 400);


            while (this.isAvailable.length > 0) {
                this.isAvailable.pop();

            }


        }

    </script>
}