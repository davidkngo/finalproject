@page
@model SingleModel
@{
    ViewData["Title"] = "Play";
}

<div class="username-container">
    <input type="submit" value="Continue" onclick="continueToGame()" />
</div>
<div class="game-container" >
    <div id="button">
        <div id="title">2048</div>
        <button id='score'>SCORE<br></button>
        <button id='undo'>UNDO<br></button>
    </div>
    <div class="grid-container">
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="tile-container">
        </div>
    </div>
</div>



@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script type="text/javascript">
        let transportType = signalR.TransportType.WebSockets;
        let http = new signalR.HttpConnection(`http://${document.location.host}/hubs/game`, { transport: transportType });
        let connection = new signalR.HubConnection(http);

        function continueToGame() {
            connection.invoke("GetBoard");
            connection.invoke("Connect", $("#username").val());
        }


        connection.on("Connected", function (message) {

        });

        connection.on("SendBoard", function (message) {
            gameContainer(message);

        });



        connection.start();
        //VARIABLE
        var tileContainer = document.querySelector(".tile-container");
        var score = 0;
        var stack = [];
        this.tiles = [];
        this.values = [];
        this.colorHex = {
            "v0": "#D2D2C8",
            "v2": "#FA5252",
            "v4": "#607BB0",
            "v8": "#9FE660",
            "v16": "#E6D960",
            "v32": "#C77070",
            "v64": "#4DA6FF",
            "v128": "#FF0000",
            "v256": "#967FF9",
            "v512": "#000080",
            "v1024": "#f3904f",
            "v2048": "#8080ff"
        };



        this.map = {

            'UP': { row: 1, col: 0, x: 1, y: 0 },
            'LEFT': { row: 0, col: -1, x: 0, y: 1 },
            'DOWN': { row: -1, col: 0, x: 1, y: 0 },
            'RIGHT': { row: 0, col: 1, x: 0, y: 1 }
        };

        //document.addEventListener("DOMContentLoaded", function () {
        //    setup();
        //    addRandom();
        //    addRandom();
        //    pushStack();
        //    render();
        //});

        //SETUP AND RENDER

        function render() {
            for (var i = 0; i < 4; i++) {
                this.tiles[i] = [];
                for (var j = 0; j < 4; j++) {
                    this.tiles[i][j] = document.createElement("div");
                    this.tiles[i][j].className = "tile";
                    tileContainer.appendChild(this.tiles[i][j]);
                    var value = this.values[i][j];
                    $(this.tiles[i][j]).css("background", this.colorHex[`v${value}`]);
                    this.tiles[i][j].innerHTML = (value != 0) ? value : "";
                    var x = 110 * j + 10;
                    var y = 110 * i + 10;
                    $(this.tiles[i][j]).css("left", `${x}px`);
                    $(this.tiles[i][j]).css("top", `${y}px`);
                }
            }
        }

        //CREATE TILE

        function addRandom() {
            do {
                var x = Math.floor(Math.random() * 4);
                var y = Math.floor(Math.random() * 4);
            } while (this.values[x][y])
            this.values[x][y] = Math.random() < 0.9 ? 2 : 4;
            setTile(x, y);
        }

        function setTile(x, y) {
            $(this.tiles[x][y]).css("background", this.colorHex[`v${this.values[x][y]}`]);
            $(this.tiles[x][y]).addClass("new-tile");
            $(this.tiles[x][y]).html(this.values[x][y]);
            setTimeout(function () {
                $(this.tiles[x][y]).removeClass("new-tile");
            }, 150);
        }
        //SET TILE POSITION
        function handler(direction) {
            var state = { changed: false };
            switch (direction) {
                case 'UP': move(0, 0, direction, state); break;
                case 'LEFT': move(0, 3, direction, state); break;
                case 'DOWN': move(3, 0, direction, state); break;
                case 'RIGHT': move(0, 0, direction, state); break;
            }
            if (state.changed) {
                addRandom();
                checkGameOver();
                pushStack();
                connection.invoke("ShareBoard", this.values);
            }
            $("#score").html("SCORE<br>" + this.score);
        }

        function move(row, col, direction, state) {
            while (!(row > 3 || row < 0 || col > 3 || col < 0)) {
                var currentRow = row;
                var currentCol = col;
                while (!(currentRow > 3 || currentRow < 0 || currentCol > 3 || currentCol < 0)) {
                    var nextRow = currentRow + this.map[direction].row;
                    var nextCol = currentCol + this.map[direction].col;
                    while (!(nextRow > 3 || nextRow < 0 || nextCol > 3 || nextCol < 0)) {
                        if (this.values[nextRow][nextCol] == 0) {
                            nextRow += this.map[direction].row;
                            nextCol += this.map[direction].col;
                        } else if (this.values[nextRow][nextCol] == this.values[currentRow][currentCol]) {
                            this.values[currentRow][currentCol] <<= 1;
                            score += this.values[currentRow][currentCol];
                            this.values[nextRow][nextCol] = 0;
                            updatePosition(currentRow, currentCol, nextRow, nextCol, this.values[currentRow][currentCol]);
                            state.changed = true;
                            break;
                        } else {
                            if (this.values[currentRow][currentCol] == 0 && this.values[nextRow][nextCol] != 0) {
                                this.values[currentRow][currentCol] = this.values[nextRow][nextCol];
                                this.values[nextRow][nextCol] = 0;
                                updatePosition(currentRow, currentCol, nextRow, nextCol, this.values[currentRow][currentCol]);
                                state.changed = true;
                                currentRow -= this.map[direction].row;
                                currentCol -= this.map[direction].col;
                                break;
                            } else if (this.values[currentRow][currentCol] != 0) {
                                break;
                            }
                        }
                    }
                    currentRow += this.map[direction].row;
                    currentCol += this.map[direction].col;
                }
                row += this.map[direction].y;
                col += this.map[direction].x;
            }
        }

        function updatePosition(currentRow, currentCol, nextRow, nextCol, value) {
            var currentTile = this.tiles[currentRow][currentCol];
            var nextTile = this.tiles[nextRow][nextCol];
            var clone = nextTile.cloneNode(true);
            nextTile.innerHTML = "";
            $(nextTile).css("background", "none");
            var colorHex = this.colorHex[`v${value}`];
            tileContainer.appendChild(clone);
            $(clone).animate({
                "left": `${$(currentTile).css("left")}`,
                "top": `${$(currentTile).css("top")}`,
            }, 100);
            setTimeout(function () {
                $(clone).remove();
                currentTile.innerHTML = value;
                $(currentTile).css("background", colorHex);
            }, 100);
        }

        //UNDO FEATURE
        function pushStack() {
            for (var x = 0; x < 4; x++) for (var y = 0; y < 4; y++) stack.push(this.values[x][y]);
            stack.push(score);
        }

        function makeUndo() {
            if (stack.length > 25) {
                $("#title").html('2048');
                stack.splice(-17, 17);
                score = stack.pop();
                $("#score").html("SCORE<br>" + score);
                for (var x = 3; x >= 0; x--) for (var y = 3; y >= 0; y--) values[x][y] = stack.pop();
                $(tileContainer).empty();
                pushStack();
                render();
                connection.invoke("ShareBoard", this.values);
            }
        }

        //CHECK ENDGAME
        function checkGameOver() {
            if (isEnd()) $("#title").html('END!');
        }

        function isEnd() {
            var counter = 0;
            for (var x = 0; x < 4; x++) for (var y = 0; y < 4; y++)
                if (this.values[x][y] != 0) counter++;
            if (counter == 16) {
                counter = 0;
                for (var x = 0; x < 4; x++) for (var y = 0; y < 4; y++) {
                    var a = ((x + 1) < 4) ? this.values[x + 1][y] : 0;
                    var b = ((x - 1) >= 0) ? this.values[x - 1][y] : 0;
                    var c = ((y + 1) < 4) ? this.values[x][y + 1] : 0;
                    var d = ((y - 1) >= 0) ? this.values[x][y - 1] : 0;
                    if (![a, b, c, d].includes(this.values[x][y])) counter++;
                }
            }
            return (counter == 16) ? true : false;
        }

        //KEYBOARD AND MOUSE CONTROLLER

        function gameContainer(cells) {
            this.values = cells;
            render();
            connection.invoke("ShareBoard", cells);
            document.onkeydown = function (e) {
                switch (e.keyCode) {
                    case 37: handler("RIGHT"); break;
                    case 38: handler("UP"); break;
                    case 39: handler("LEFT"); break;
                    case 40: handler("DOWN"); break;
                }
            }
            $('#undo').click(function () {
                makeUndo();
            });

        }
    </script>
}